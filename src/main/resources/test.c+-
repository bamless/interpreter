int[] main() {
    int fib = 20
    
    println "fibonacci:"
    
    print "fibdp(" + fib + ") = "
    println fibdp(fib)

    print "fib(" + fib + ") = "
    println fib(fib)
    
    println ""
    println "exponentiation by squaring:"
    
    int base = 3
    int exp = 0
    
    print "exp(" + base + ", " + exp + ") = "
    println exp(base, exp)

    println ""

    int n = 10

    println "factorial:"
    print "fact(" + n + ") = "
    println fact(n)

    println ""

    //other tests for break, continue and type casting
    int k
    for(k = 0; k < 20; k++) {
        if(k == 5) break
        print k + "\n"
    }
    
    println ""

    println (int) 3.54
    println (float) 3 / 2

    int arr[20]
    for(k = 0; k < len(arr); k++) {
        arr[k] = k + 1
    }

    println "arr length " + len(arr)

    return arr
}

//recursive fibonacci, because now we can!
int fib(int n) {
    if(n == 0 || n == 1)
        return n
        
    return fib(n - 1) + fib(n - 2)
}

//fibonacci with no recursion
int fibdp(int n) {
    int fib[3]
    fib[0] = 1 fib[1] = 1
    
    int i
    for(i = 2; i < n; i++)
        fib[i % 3] = fib[(i - 1) % 3] + fib[(i - 2) % 3]
        
    return fib[(i - 1) % 3]
}

//exponentiation by squaring
float exp(float base, float exp) {
    float y = 1
    if(exp < 0) {
        base = 1 / base
        exp = -exp
    }
    
    if(exp != 0) {
        while(exp > 1) {
            if(exp % 2 == 0) {
                base *= base
                exp /= 2
            } else {
                y *= base
                base *= base
                exp = (exp - 1) / 2
            }
        }
        return base * y
    } else
        return 1
}

int fact(int n) {
    if(n == 0) return 1
    return n * fact(n - 1)
}
